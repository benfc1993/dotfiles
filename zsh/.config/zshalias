vim()
{
    if [[ -f "${1}" ]]; then
        cd "$(dirname "${1}")"
        nvim "$(basename "${1}")"
    else
        cd "${1:-.}";
        nvim
    fi
}

cmkd()
{
    mkdir -p -- "$1" &&
    cd -- "$1"
}

# git worktree commands
alias gwl="git worktree list"
git-clean()
{
    git for-each-ref --format '%(refname:short)' refs/heads | grep -v "master\|main" | xargs git branch -D
}

gwa()
{
    gitdir="$(git rev-parse --path-format=absolute --git-common-dir)"
    if [[ -d "$gitdir" ]]; then
        cd "$gitdir"
        if [[ -z $(grep -F "fetch =" config) ]]; then
            git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
        fi

        if [[  -z $(git ls-remote --heads origin refs/heads/"$1") ]]; then
            echo "branch not found on remote"
            git worktree add -b $1 "$gitdir/$1";
        else
            echo "branch  found on remote"
            if [[ -z $(git rev-parse --verify $1 2>/dev/null) ]]; then
                echo "tracking remote"
                git worktree add --track -b "$1" "$gitdir/$1" origin/"$1";
            else
                git worktree add "$1"
            fi
            # git branch -u refs/heads/"$1" "$1"
        fi
        gwc $1
    else
        echo "Not in a git repo"
    fi
}

gwd()
{
    if git rev-parse --git-dir > /dev/null 2>&1; then

        branch=$( git worktree list | sed -r -e 's/(\w*) .*/\1/g' | sed -r -e 's/.*.git\/?(\w*)/\1/g' | sed -r '/^\s*$/d' | fzf-tmux -p)
        if [[ ! -z "$branch" ]]; then
            clean=$(echo "$branch" | cut -d ' ' -f1)
            git worktree remove "$clean" "$@"
        fi
    else
        echo "Not in a git repo"
    fi

}

gwc()
{
    if git rev-parse --git-dir > /dev/null 2>&1; then
        if [[ ! -z $1 ]]; then
            branch="$1"
        else
            common_dir="$(git rev-parse --path-format=absolute --git-common-dir)"
            branch=$(git worktree list | sed -r -e "s|$common_dir||g" | sed -r -e 's|.*/||' | sed -r -e 's|(\w*) .*|\1|g' | sed -r '/^\s*$/d'| fzf-tmux -p)
        fi

        if [[ ! -z "$branch" ]]; then
            gitdir="$(git rev-parse --path-format=absolute --git-common-dir)/worktrees/$(echo "$branch" | cut -d ' ' -f1)"
            if [[ -d "$gitdir" ]]; then
                cd $(cat "$gitdir/gitdir" | sed -n -E 's/(.*)\/.git/\1/p')
            else
                echo "branch does not exist in this repo"
            fi
        fi
    else
        echo "Not in a git repo"
    fi

}

gwv()
{
    gwc $1 && nvim
}

if alias gcm >/dev/null 2>&1; then
    unalias gcm
fi

gcm()
{
    git commit -m $1 && git push
}

gac()
{
    git add . && git commit -m $1 && git push
}

gs()
{
    git stash $@
}

gsa()
{
    git stash apply $@
}

if alias gb >/dev/null 2>&1; then
    unalias gb
fi

gb()
{
    git checkout -b $@
}

alias nr="npm run"
if alias vimg >/dev/null 2>&1; then
    unalias vimg
fi

function vimg()
{
    local filename="${1:-.}" # Set filename to "." if no argument is passed
    nvim --listen /tmp/godot.pipe
}

ts(){
    if hash bun 2>/dev/null; then
        bunx tsx $@
    else
        npx tsx $@
    fi
}

tsw(){
    if hash bun 2>/dev/null; then
        bunx tsx --watch $@
    else
        npx tsx --watch $@
    fi
}
